/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FontConfigService } from "../fontConfig.service";
import { FontConfigCreateInput } from "./FontConfigCreateInput";
import { FontConfig } from "./FontConfig";
import { FontConfigFindManyArgs } from "./FontConfigFindManyArgs";
import { FontConfigWhereUniqueInput } from "./FontConfigWhereUniqueInput";
import { FontConfigUpdateInput } from "./FontConfigUpdateInput";

export class FontConfigControllerBase {
  constructor(protected readonly service: FontConfigService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FontConfig })
  async createFontConfig(
    @common.Body() data: FontConfigCreateInput
  ): Promise<FontConfig> {
    return await this.service.createFontConfig({
      data: data,
      select: {
        createdAt: true,
        fontFamily: true,
        fontSize: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FontConfig] })
  @ApiNestedQuery(FontConfigFindManyArgs)
  async fontConfigs(@common.Req() request: Request): Promise<FontConfig[]> {
    const args = plainToClass(FontConfigFindManyArgs, request.query);
    return this.service.fontConfigs({
      ...args,
      select: {
        createdAt: true,
        fontFamily: true,
        fontSize: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FontConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fontConfig(
    @common.Param() params: FontConfigWhereUniqueInput
  ): Promise<FontConfig | null> {
    const result = await this.service.fontConfig({
      where: params,
      select: {
        createdAt: true,
        fontFamily: true,
        fontSize: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FontConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFontConfig(
    @common.Param() params: FontConfigWhereUniqueInput,
    @common.Body() data: FontConfigUpdateInput
  ): Promise<FontConfig | null> {
    try {
      return await this.service.updateFontConfig({
        where: params,
        data: data,
        select: {
          createdAt: true,
          fontFamily: true,
          fontSize: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FontConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFontConfig(
    @common.Param() params: FontConfigWhereUniqueInput
  ): Promise<FontConfig | null> {
    try {
      return await this.service.deleteFontConfig({
        where: params,
        select: {
          createdAt: true,
          fontFamily: true,
          fontSize: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
