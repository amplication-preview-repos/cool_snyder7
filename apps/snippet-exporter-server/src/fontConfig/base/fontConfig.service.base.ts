/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FontConfig as PrismaFontConfig } from "@prisma/client";

export class FontConfigServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FontConfigCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fontConfig.count(args);
  }

  async fontConfigs<T extends Prisma.FontConfigFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FontConfigFindManyArgs>
  ): Promise<PrismaFontConfig[]> {
    return this.prisma.fontConfig.findMany<Prisma.FontConfigFindManyArgs>(args);
  }
  async fontConfig<T extends Prisma.FontConfigFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FontConfigFindUniqueArgs>
  ): Promise<PrismaFontConfig | null> {
    return this.prisma.fontConfig.findUnique(args);
  }
  async createFontConfig<T extends Prisma.FontConfigCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FontConfigCreateArgs>
  ): Promise<PrismaFontConfig> {
    return this.prisma.fontConfig.create<T>(args);
  }
  async updateFontConfig<T extends Prisma.FontConfigUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FontConfigUpdateArgs>
  ): Promise<PrismaFontConfig> {
    return this.prisma.fontConfig.update<T>(args);
  }
  async deleteFontConfig<T extends Prisma.FontConfigDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FontConfigDeleteArgs>
  ): Promise<PrismaFontConfig> {
    return this.prisma.fontConfig.delete(args);
  }
}
