/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FontConfig } from "./FontConfig";
import { FontConfigCountArgs } from "./FontConfigCountArgs";
import { FontConfigFindManyArgs } from "./FontConfigFindManyArgs";
import { FontConfigFindUniqueArgs } from "./FontConfigFindUniqueArgs";
import { CreateFontConfigArgs } from "./CreateFontConfigArgs";
import { UpdateFontConfigArgs } from "./UpdateFontConfigArgs";
import { DeleteFontConfigArgs } from "./DeleteFontConfigArgs";
import { FontConfigService } from "../fontConfig.service";
@graphql.Resolver(() => FontConfig)
export class FontConfigResolverBase {
  constructor(protected readonly service: FontConfigService) {}

  async _fontConfigsMeta(
    @graphql.Args() args: FontConfigCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FontConfig])
  async fontConfigs(
    @graphql.Args() args: FontConfigFindManyArgs
  ): Promise<FontConfig[]> {
    return this.service.fontConfigs(args);
  }

  @graphql.Query(() => FontConfig, { nullable: true })
  async fontConfig(
    @graphql.Args() args: FontConfigFindUniqueArgs
  ): Promise<FontConfig | null> {
    const result = await this.service.fontConfig(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FontConfig)
  async createFontConfig(
    @graphql.Args() args: CreateFontConfigArgs
  ): Promise<FontConfig> {
    return await this.service.createFontConfig({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FontConfig)
  async updateFontConfig(
    @graphql.Args() args: UpdateFontConfigArgs
  ): Promise<FontConfig | null> {
    try {
      return await this.service.updateFontConfig({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FontConfig)
  async deleteFontConfig(
    @graphql.Args() args: DeleteFontConfigArgs
  ): Promise<FontConfig | null> {
    try {
      return await this.service.deleteFontConfig(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
