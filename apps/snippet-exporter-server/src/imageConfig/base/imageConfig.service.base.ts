/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ImageConfig as PrismaImageConfig } from "@prisma/client";

export class ImageConfigServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ImageConfigCountArgs, "select">
  ): Promise<number> {
    return this.prisma.imageConfig.count(args);
  }

  async imageConfigs<T extends Prisma.ImageConfigFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageConfigFindManyArgs>
  ): Promise<PrismaImageConfig[]> {
    return this.prisma.imageConfig.findMany<Prisma.ImageConfigFindManyArgs>(
      args
    );
  }
  async imageConfig<T extends Prisma.ImageConfigFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageConfigFindUniqueArgs>
  ): Promise<PrismaImageConfig | null> {
    return this.prisma.imageConfig.findUnique(args);
  }
  async createImageConfig<T extends Prisma.ImageConfigCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageConfigCreateArgs>
  ): Promise<PrismaImageConfig> {
    return this.prisma.imageConfig.create<T>(args);
  }
  async updateImageConfig<T extends Prisma.ImageConfigUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageConfigUpdateArgs>
  ): Promise<PrismaImageConfig> {
    return this.prisma.imageConfig.update<T>(args);
  }
  async deleteImageConfig<T extends Prisma.ImageConfigDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageConfigDeleteArgs>
  ): Promise<PrismaImageConfig> {
    return this.prisma.imageConfig.delete(args);
  }
}
