/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ImageConfig } from "./ImageConfig";
import { ImageConfigCountArgs } from "./ImageConfigCountArgs";
import { ImageConfigFindManyArgs } from "./ImageConfigFindManyArgs";
import { ImageConfigFindUniqueArgs } from "./ImageConfigFindUniqueArgs";
import { CreateImageConfigArgs } from "./CreateImageConfigArgs";
import { UpdateImageConfigArgs } from "./UpdateImageConfigArgs";
import { DeleteImageConfigArgs } from "./DeleteImageConfigArgs";
import { ImageConfigService } from "../imageConfig.service";
@graphql.Resolver(() => ImageConfig)
export class ImageConfigResolverBase {
  constructor(protected readonly service: ImageConfigService) {}

  async _imageConfigsMeta(
    @graphql.Args() args: ImageConfigCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ImageConfig])
  async imageConfigs(
    @graphql.Args() args: ImageConfigFindManyArgs
  ): Promise<ImageConfig[]> {
    return this.service.imageConfigs(args);
  }

  @graphql.Query(() => ImageConfig, { nullable: true })
  async imageConfig(
    @graphql.Args() args: ImageConfigFindUniqueArgs
  ): Promise<ImageConfig | null> {
    const result = await this.service.imageConfig(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ImageConfig)
  async createImageConfig(
    @graphql.Args() args: CreateImageConfigArgs
  ): Promise<ImageConfig> {
    return await this.service.createImageConfig({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ImageConfig)
  async updateImageConfig(
    @graphql.Args() args: UpdateImageConfigArgs
  ): Promise<ImageConfig | null> {
    try {
      return await this.service.updateImageConfig({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ImageConfig)
  async deleteImageConfig(
    @graphql.Args() args: DeleteImageConfigArgs
  ): Promise<ImageConfig | null> {
    try {
      return await this.service.deleteImageConfig(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
