/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ImageConfigService } from "../imageConfig.service";
import { ImageConfigCreateInput } from "./ImageConfigCreateInput";
import { ImageConfig } from "./ImageConfig";
import { ImageConfigFindManyArgs } from "./ImageConfigFindManyArgs";
import { ImageConfigWhereUniqueInput } from "./ImageConfigWhereUniqueInput";
import { ImageConfigUpdateInput } from "./ImageConfigUpdateInput";

export class ImageConfigControllerBase {
  constructor(protected readonly service: ImageConfigService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ImageConfig })
  async createImageConfig(
    @common.Body() data: ImageConfigCreateInput
  ): Promise<ImageConfig> {
    return await this.service.createImageConfig({
      data: data,
      select: {
        backgroundColor: true,
        createdAt: true,
        height: true,
        id: true,
        updatedAt: true,
        width: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ImageConfig] })
  @ApiNestedQuery(ImageConfigFindManyArgs)
  async imageConfigs(@common.Req() request: Request): Promise<ImageConfig[]> {
    const args = plainToClass(ImageConfigFindManyArgs, request.query);
    return this.service.imageConfigs({
      ...args,
      select: {
        backgroundColor: true,
        createdAt: true,
        height: true,
        id: true,
        updatedAt: true,
        width: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ImageConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async imageConfig(
    @common.Param() params: ImageConfigWhereUniqueInput
  ): Promise<ImageConfig | null> {
    const result = await this.service.imageConfig({
      where: params,
      select: {
        backgroundColor: true,
        createdAt: true,
        height: true,
        id: true,
        updatedAt: true,
        width: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ImageConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateImageConfig(
    @common.Param() params: ImageConfigWhereUniqueInput,
    @common.Body() data: ImageConfigUpdateInput
  ): Promise<ImageConfig | null> {
    try {
      return await this.service.updateImageConfig({
        where: params,
        data: data,
        select: {
          backgroundColor: true,
          createdAt: true,
          height: true,
          id: true,
          updatedAt: true,
          width: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ImageConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteImageConfig(
    @common.Param() params: ImageConfigWhereUniqueInput
  ): Promise<ImageConfig | null> {
    try {
      return await this.service.deleteImageConfig({
        where: params,
        select: {
          backgroundColor: true,
          createdAt: true,
          height: true,
          id: true,
          updatedAt: true,
          width: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
