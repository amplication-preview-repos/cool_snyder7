/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Snippet } from "./Snippet";
import { SnippetCountArgs } from "./SnippetCountArgs";
import { SnippetFindManyArgs } from "./SnippetFindManyArgs";
import { SnippetFindUniqueArgs } from "./SnippetFindUniqueArgs";
import { CreateSnippetArgs } from "./CreateSnippetArgs";
import { UpdateSnippetArgs } from "./UpdateSnippetArgs";
import { DeleteSnippetArgs } from "./DeleteSnippetArgs";
import { SnippetService } from "../snippet.service";
@graphql.Resolver(() => Snippet)
export class SnippetResolverBase {
  constructor(protected readonly service: SnippetService) {}

  async _snippetsMeta(
    @graphql.Args() args: SnippetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Snippet])
  async snippets(
    @graphql.Args() args: SnippetFindManyArgs
  ): Promise<Snippet[]> {
    return this.service.snippets(args);
  }

  @graphql.Query(() => Snippet, { nullable: true })
  async snippet(
    @graphql.Args() args: SnippetFindUniqueArgs
  ): Promise<Snippet | null> {
    const result = await this.service.snippet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Snippet)
  async createSnippet(
    @graphql.Args() args: CreateSnippetArgs
  ): Promise<Snippet> {
    return await this.service.createSnippet({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Snippet)
  async updateSnippet(
    @graphql.Args() args: UpdateSnippetArgs
  ): Promise<Snippet | null> {
    try {
      return await this.service.updateSnippet({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Snippet)
  async deleteSnippet(
    @graphql.Args() args: DeleteSnippetArgs
  ): Promise<Snippet | null> {
    try {
      return await this.service.deleteSnippet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
