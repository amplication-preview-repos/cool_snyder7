/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SnippetService } from "../snippet.service";
import { SnippetCreateInput } from "./SnippetCreateInput";
import { Snippet } from "./Snippet";
import { SnippetFindManyArgs } from "./SnippetFindManyArgs";
import { SnippetWhereUniqueInput } from "./SnippetWhereUniqueInput";
import { SnippetUpdateInput } from "./SnippetUpdateInput";

export class SnippetControllerBase {
  constructor(protected readonly service: SnippetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Snippet })
  async createSnippet(
    @common.Body() data: SnippetCreateInput
  ): Promise<Snippet> {
    return await this.service.createSnippet({
      data: data,
      select: {
        code: true,
        createdAt: true,
        id: true,
        language: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Snippet] })
  @ApiNestedQuery(SnippetFindManyArgs)
  async snippets(@common.Req() request: Request): Promise<Snippet[]> {
    const args = plainToClass(SnippetFindManyArgs, request.query);
    return this.service.snippets({
      ...args,
      select: {
        code: true,
        createdAt: true,
        id: true,
        language: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Snippet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async snippet(
    @common.Param() params: SnippetWhereUniqueInput
  ): Promise<Snippet | null> {
    const result = await this.service.snippet({
      where: params,
      select: {
        code: true,
        createdAt: true,
        id: true,
        language: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Snippet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSnippet(
    @common.Param() params: SnippetWhereUniqueInput,
    @common.Body() data: SnippetUpdateInput
  ): Promise<Snippet | null> {
    try {
      return await this.service.updateSnippet({
        where: params,
        data: data,
        select: {
          code: true,
          createdAt: true,
          id: true,
          language: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Snippet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSnippet(
    @common.Param() params: SnippetWhereUniqueInput
  ): Promise<Snippet | null> {
    try {
      return await this.service.deleteSnippet({
        where: params,
        select: {
          code: true,
          createdAt: true,
          id: true,
          language: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
