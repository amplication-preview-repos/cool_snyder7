/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Snippet as PrismaSnippet } from "@prisma/client";

export class SnippetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SnippetCountArgs, "select">): Promise<number> {
    return this.prisma.snippet.count(args);
  }

  async snippets<T extends Prisma.SnippetFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SnippetFindManyArgs>
  ): Promise<PrismaSnippet[]> {
    return this.prisma.snippet.findMany<Prisma.SnippetFindManyArgs>(args);
  }
  async snippet<T extends Prisma.SnippetFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SnippetFindUniqueArgs>
  ): Promise<PrismaSnippet | null> {
    return this.prisma.snippet.findUnique(args);
  }
  async createSnippet<T extends Prisma.SnippetCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SnippetCreateArgs>
  ): Promise<PrismaSnippet> {
    return this.prisma.snippet.create<T>(args);
  }
  async updateSnippet<T extends Prisma.SnippetUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SnippetUpdateArgs>
  ): Promise<PrismaSnippet> {
    return this.prisma.snippet.update<T>(args);
  }
  async deleteSnippet<T extends Prisma.SnippetDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SnippetDeleteArgs>
  ): Promise<PrismaSnippet> {
    return this.prisma.snippet.delete(args);
  }
}
