/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ColorConfig as PrismaColorConfig } from "@prisma/client";

export class ColorConfigServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ColorConfigCountArgs, "select">
  ): Promise<number> {
    return this.prisma.colorConfig.count(args);
  }

  async colorConfigs<T extends Prisma.ColorConfigFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ColorConfigFindManyArgs>
  ): Promise<PrismaColorConfig[]> {
    return this.prisma.colorConfig.findMany<Prisma.ColorConfigFindManyArgs>(
      args
    );
  }
  async colorConfig<T extends Prisma.ColorConfigFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ColorConfigFindUniqueArgs>
  ): Promise<PrismaColorConfig | null> {
    return this.prisma.colorConfig.findUnique(args);
  }
  async createColorConfig<T extends Prisma.ColorConfigCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ColorConfigCreateArgs>
  ): Promise<PrismaColorConfig> {
    return this.prisma.colorConfig.create<T>(args);
  }
  async updateColorConfig<T extends Prisma.ColorConfigUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ColorConfigUpdateArgs>
  ): Promise<PrismaColorConfig> {
    return this.prisma.colorConfig.update<T>(args);
  }
  async deleteColorConfig<T extends Prisma.ColorConfigDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ColorConfigDeleteArgs>
  ): Promise<PrismaColorConfig> {
    return this.prisma.colorConfig.delete(args);
  }
}
