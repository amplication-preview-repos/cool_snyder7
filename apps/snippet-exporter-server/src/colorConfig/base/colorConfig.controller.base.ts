/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ColorConfigService } from "../colorConfig.service";
import { ColorConfigCreateInput } from "./ColorConfigCreateInput";
import { ColorConfig } from "./ColorConfig";
import { ColorConfigFindManyArgs } from "./ColorConfigFindManyArgs";
import { ColorConfigWhereUniqueInput } from "./ColorConfigWhereUniqueInput";
import { ColorConfigUpdateInput } from "./ColorConfigUpdateInput";

export class ColorConfigControllerBase {
  constructor(protected readonly service: ColorConfigService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ColorConfig })
  async createColorConfig(
    @common.Body() data: ColorConfigCreateInput
  ): Promise<ColorConfig> {
    return await this.service.createColorConfig({
      data: data,
      select: {
        createdAt: true,
        id: true,
        syntaxHighlight: true,
        textColor: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ColorConfig] })
  @ApiNestedQuery(ColorConfigFindManyArgs)
  async colorConfigs(@common.Req() request: Request): Promise<ColorConfig[]> {
    const args = plainToClass(ColorConfigFindManyArgs, request.query);
    return this.service.colorConfigs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        syntaxHighlight: true,
        textColor: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ColorConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async colorConfig(
    @common.Param() params: ColorConfigWhereUniqueInput
  ): Promise<ColorConfig | null> {
    const result = await this.service.colorConfig({
      where: params,
      select: {
        createdAt: true,
        id: true,
        syntaxHighlight: true,
        textColor: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ColorConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateColorConfig(
    @common.Param() params: ColorConfigWhereUniqueInput,
    @common.Body() data: ColorConfigUpdateInput
  ): Promise<ColorConfig | null> {
    try {
      return await this.service.updateColorConfig({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          syntaxHighlight: true,
          textColor: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ColorConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteColorConfig(
    @common.Param() params: ColorConfigWhereUniqueInput
  ): Promise<ColorConfig | null> {
    try {
      return await this.service.deleteColorConfig({
        where: params,
        select: {
          createdAt: true,
          id: true,
          syntaxHighlight: true,
          textColor: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
