/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ColorConfig } from "./ColorConfig";
import { ColorConfigCountArgs } from "./ColorConfigCountArgs";
import { ColorConfigFindManyArgs } from "./ColorConfigFindManyArgs";
import { ColorConfigFindUniqueArgs } from "./ColorConfigFindUniqueArgs";
import { CreateColorConfigArgs } from "./CreateColorConfigArgs";
import { UpdateColorConfigArgs } from "./UpdateColorConfigArgs";
import { DeleteColorConfigArgs } from "./DeleteColorConfigArgs";
import { ColorConfigService } from "../colorConfig.service";
@graphql.Resolver(() => ColorConfig)
export class ColorConfigResolverBase {
  constructor(protected readonly service: ColorConfigService) {}

  async _colorConfigsMeta(
    @graphql.Args() args: ColorConfigCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ColorConfig])
  async colorConfigs(
    @graphql.Args() args: ColorConfigFindManyArgs
  ): Promise<ColorConfig[]> {
    return this.service.colorConfigs(args);
  }

  @graphql.Query(() => ColorConfig, { nullable: true })
  async colorConfig(
    @graphql.Args() args: ColorConfigFindUniqueArgs
  ): Promise<ColorConfig | null> {
    const result = await this.service.colorConfig(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ColorConfig)
  async createColorConfig(
    @graphql.Args() args: CreateColorConfigArgs
  ): Promise<ColorConfig> {
    return await this.service.createColorConfig({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ColorConfig)
  async updateColorConfig(
    @graphql.Args() args: UpdateColorConfigArgs
  ): Promise<ColorConfig | null> {
    try {
      return await this.service.updateColorConfig({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ColorConfig)
  async deleteColorConfig(
    @graphql.Args() args: DeleteColorConfigArgs
  ): Promise<ColorConfig | null> {
    try {
      return await this.service.deleteColorConfig(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
